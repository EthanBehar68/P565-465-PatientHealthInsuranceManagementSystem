{"version":3,"sources":["store/reducers/example.js","store/types.js","store/reducers/index.js","containers/Main.js","components/Nav/PrivateRoute.js","containers/App.js","store/index.js","serviceWorker.js","index.js"],"names":["example","state","action","type","payload","rootReducer","combineReducers","Main","connect","auth","Component","component","portal","rest","render","props","isAuthenticated","user","db","to","loaded","withRouter","store","createStore","compose","applyMiddleware","thunk","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QAWeA,EATC,WAAyB,IAAxBC,EAAuB,uDAAf,GAAIC,EAAW,uCACvC,OAAOA,EAAOC,MACb,ICJyB,cDKxB,OAAO,YAAID,EAAOE,SACnB,QACC,OAAOH,IEAKI,EAJKC,YAAgB,CACnCN,Y,iCCCKO,GCiBSC,aAHS,SAAAP,GAAK,MAAK,CAChCQ,KAAMR,EAAMQ,QAECD,EAlBM,SAAC,GAAD,IAAcE,EAAd,EAAGC,UAAsBF,EAAzB,EAAyBA,KAAMG,EAA/B,EAA+BA,OAAWC,EAA1C,oDACnB,kBAAC,IAAD,iBACMA,EADN,CAEEC,OAAQ,SAAAC,GAAK,OACc,IAAzBN,EAAKO,iBAA4BJ,GAAUH,EAAKQ,KAAKC,GACnD,kBAACR,EAAcK,GAEf,kBAAC,IAAD,CAAUI,GAAc,WAAVP,EAAsB,UAAY,gB,kDDLvD,WAAYG,GAAQ,IAAD,8BAClB,cAAMA,IACDd,MAAQ,CACZmB,QAAQ,GAHS,E,qDASlB,OACC,kBAAC,WAAD,wB,GAXgBV,cAsBJF,eAJS,SAAAP,GAAK,MAAK,KAIK,GAAxBO,CAA4Ba,YAAWd,IEjBhDe,ECLSC,YACblB,EACAmB,YACCC,YAAgBC,ODyBJC,E,kDApBb,WAAYZ,GAAQ,IAAD,8BACjB,cAAMA,IACDd,MAAQ,GAFI,E,qDAQjB,OACE,kBAAC,WAAD,KACE,kBAAC,IAAD,CAAUqB,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,EAAD,a,GAbMZ,aEAEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTJC,IAASnB,OACL,kBAAC,EAAD,MACAoB,SAASC,eAAe,SDsHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3d9c9b36.chunk.js","sourcesContent":["import {GET_EXAMPLE} from '../types';\n\nconst example = (state = [], action) => {\n\tswitch(action.type) {\n\t\tcase GET_EXAMPLE:\n\t\t\treturn [...action.payload];\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nexport default example;","export const GET_EXAMPLE = \"GET_EXAMPLE\";","import {combineReducers} from 'redux';\nimport example from \"./example\";\n\nconst rootReducer = combineReducers({\n\texample\n});\n\nexport default rootReducer;","import React, {Component, Fragment} from 'react';\nimport {Switch, Route, withRouter, Redirect} from 'react-router-dom';\nimport PrivateRoute from '../components/Nav/PrivateRoute';\nimport {connect} from \"react-redux\";\n\nclass Main extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tloaded: false\n\t\t};\n\t}\n\n\trender() {\n\n\t\treturn (\n\t\t\t<Fragment>\n\t\t\t\tHello World\n      </Fragment>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = state => ({\n\n});\n\nexport default connect(mapStateToProps,{})(withRouter(Main));\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nconst PrivateRoute = ({ component: Component, auth, portal, ...rest }) => (\n  <Route\n    {...rest}\n    render={props =>\n      auth.isAuthenticated === true && portal == auth.user.db ? (\n        <Component {...props} />\n      ) : (\n        <Redirect to={portal == \"workers\" ? \"/worker\" : \"/app\"} />\n      )\n    }\n  />\n);\nPrivateRoute.propTypes = {\n  auth: PropTypes.object.isRequired\n};\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\nexport default connect(mapStateToProps)(PrivateRoute);\n","import React, {Component, Fragment} from 'react';\nimport {Switch, Route, withRouter, Redirect} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport {Provider} from 'react-redux';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport {configureStore} from '../store';\nimport empty from 'is-empty';\n\nimport Main from './Main';\n\nconst store = configureStore();\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n  }\n \n\n  render() {\n    return (\n      <Fragment>\n        <Provider store={store}>\n          <Router>\n            <Main />\n          </Router>\n        </Provider>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","import rootReducer from './reducers';\nimport {createStore, applyMiddleware, compose} from 'redux';\nimport thunk from 'redux-thunk';\n\nexport function configureStore(){\n\tconst store = createStore(\n\t\trootReducer, \n\t\tcompose(\n\t\t\tapplyMiddleware(thunk)\n\t\t)\n\t);\n\n\treturn store;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst DO_NOT_LOGIN = false;\n\n// runWithAdal(authContext, () => {\n  ReactDOM.render(\n      <App />,\n      document.getElementById('root')\n  );\n  serviceWorker.unregister();\n// }, DO_NOT_LOGIN);\n"],"sourceRoot":""}